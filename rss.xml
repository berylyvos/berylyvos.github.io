<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Shingo四叠半</title><link>https://berylyvos.icu/</link><description>This is Shigo Gnix's no interest blog.</description><generator>Hugo 0.104.3 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>berylyvos@gmail.com (Shingo)</managingEditor><webMaster>berylyvos@gmail.com (Shingo)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Wed, 11 Oct 2023 03:37:26 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://berylyvos.icu/rss.xml"/><item><title>DuckDB中自适应基数树的持久化存储</title><link>https://berylyvos.icu/posts/persistent-storage-of-adaptive-radix-trees-in-duckdb/</link><guid isPermaLink="true">https://berylyvos.icu/posts/persistent-storage-of-adaptive-radix-trees-in-duckdb/</guid><pubDate>Mon, 02 Oct 2023 23:47:32 +0800</pubDate><author>berylyvos@gmail.com (Shingo)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>原文：https://duckdb.org/2022/07/27/art-storage.html&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>tl;dr&lt;/strong>:
DuckDB使用自适应基数树（ART）索引来强制执行约束条件并加速查询过滤。到目前为止，索引未持久化存储，导致索引信息丢失、重载具有数据约束的表的时间较长等问题。我们现在将ART索引持久化存储到磁盘上，大大缩短了数据库加载时间（高达数量级），并且不再丢失现有索引的跟踪。本博文深入探讨了ART存储的实现、基准测试和未来工作。&lt;/p>
&lt;/blockquote>
&lt;p>DuckDB使用&lt;a href="https://db.in.tum.de/~leis/papers/ART.pdf">ART索引&lt;/a>来维护主键（PK）、外键（FK）和唯一约束。
它们还加速了点查询、范围查询（具有高选择性）和连接操作。在最新版本之前（或V0.4.1），DuckDB没有将ART索引持久化存储到磁盘上。
在存储数据库文件时，只会存储有关现有PK和FK的信息，所有其他索引都是临时的，重启数据库时丢失。
对于PK和FK，它们在重载数据库时会被完全重建，从而导致加载时间较长的不便。&lt;/p>
&lt;p>关于ART索引已经发表了大量研究工作，尤其是关于&lt;a href="https://db.in.tum.de/~leis/papers/artsync.pdf">同步&lt;/a>、
&lt;a href="https://dbis.uibk.ac.at/sites/default/files/2018-06/hot-height-optimized.pdf">缓存效率&lt;/a>和
&lt;a href="https://bigdata.uni-saarland.de/publications/ARCD15.pdf">评估&lt;/a>方面。
然而，迄今为止，还没有公开的关于序列化和缓冲区管理ART树的信息。&lt;/p>
&lt;p>本博文将描述DuckDB如何存储和加载ART索引。特别是解释索引是如何懒加载的（只有在必要时才将ART节点加载到内存中）。
在&lt;strong>ART索引&lt;/strong>部分，我们将介绍什么是ART索引，它是如何工作的，并提供一些示例。
在&lt;strong>DuckDB中的ART&lt;/strong>部分，我们将解释为什么决定在DuckDB中使用ART索引，以及在哪些地方使用它，讨论不持久化ART索引存在的问题。
在&lt;strong>ART存储&lt;/strong>部分，我们将解释如何在DuckDB中对ART索引进行序列化和缓冲区管理。
在&lt;strong>基准测试&lt;/strong>部分，我们将比较DuckDB v0.4.0（ART存储之前的版本）与DuckDB的最新版本。我们将展示在这两个版本中PK和FK的加载成本之间的差异，以及懒加载ART索引和访问完全加载的ART索引之间的差异。
最后，我们将讨论当前实现的缺点以及未来ART索引改进计划。&lt;/p>
&lt;h2 id="art索引">ART索引&lt;/h2>
&lt;p>自适应基数树本质上是一种垂直和水平压缩的紧凑型Trie。&lt;/p>
&lt;h3 id="trie">Trie&lt;/h3>
&lt;p>Trie是一种树状数据结构，其中每个树层级包含关于数据集的一部分信息。它们通常以字符串为例进行说明。
Trie的主要优势在于其具有O(k)的查找时间复杂度，这意味着在最坏情况下，查找操作的成本将等于字符串的长度k。&lt;/p>
&lt;p>实际上，Trie也可以用于存储数值数据类型。但是，如果像字符串一样逐个字符地存储它们，将会浪费空间。
例如，考虑类型&lt;code>uint64_t&lt;/code>，占据了64位（8字节）的空间。&lt;code>uint64_t&lt;/code>的最大值是18,446,744,073,709,551,615。
因此，如果我们像上面的示例一样表示它，我们需要17个Trie层级。
在实际中，Trie根据&lt;strong>位扇出&lt;/strong>（bit fan-out）创建，扇出指定了每个Trie层级表示多少位。
一个带有8位扇出的&lt;code>uint64_t&lt;/code> Trie最多有8层，每层表示一个字节。&lt;/p>
&lt;p>在下面的示例中，我们有一个Trie，用于索引7、10和12。每个节点由0和1两个位组成，和一个指针（*表示非空，Ø表示空）。
与之前的字符串Trie类似，Trie的每个层级都表示两个位，指针指向子节点。最后，叶子节点指向实际的数据。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/Lb2uiXCmaFJSoG6.png" alt="2-bit-trie.png">&lt;/p>
&lt;p>很快可以注意到，这种Trie表示在两个方面都是浪费的。首先，许多节点只有一个子节点（即一个路径），
这可以通过&lt;strong>垂直压缩&lt;/strong>（基数树）来合并。其次，许多节点具有空指针，占用了空间但没有包含任何信息，
这可以通过&lt;strong>水平压缩&lt;/strong>来解决。&lt;/p>
&lt;h3 id="垂直压缩rt">垂直压缩（RT）&lt;/h3>
&lt;p>垂直压缩的基本思想是合并具有只有一个子节点的路径。
为了支持这一点，节点存储一个前缀，包含压缩到该节点的路径。
下图可以看到前两个节点只有一个子节点。这些节点可以折叠到第三个节点（即第一个分叉的节点）作为&lt;strong>前缀路径&lt;/strong>。
在查找时，关键字必须匹配前缀路径中包含的所有值。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/aOQbpJVKBR8fni2.png" alt="2-bit-collapse-trie.png">&lt;/p>
&lt;p>下图中，可以看到经过垂直压缩后的Trie。这种Trie变体通常被称为&lt;strong>基数树&lt;/strong>（Radix Tree）。
虽然通过这种Trie变体已经节省了很多浪费的空间，但仍然有许多具有空指针的节点。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/Zq7NwfJi93zPeCU.png" alt="2-bit-collapse-trie-result.png">&lt;/p>
&lt;h3 id="水平压缩art">水平压缩（ART）&lt;/h3>
&lt;p>为了充分理解ART索引背后的设计决策，我们首先需要将2位扇出扩展到8位，这是DBMS中常见的扇出值。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/LYPHSiXhWpftM4c.png" alt="8-bit-radix-tree.png">&lt;/p>
&lt;p>上图是在一个具有8位扇出的Trie节点。
实际上，这些节点将存储（2^8）256个指针，其中键是指针在数组中的位置。
在这个示例所描述的情况下，一个节点的大小为（256个指针 * 8字节）2048字节，但实际上只利用了24字节（3个指针 * 8字节）。
为了避免这种情况，ART根据当前节点的填充程度使用4种不同的节点类型。&lt;/p>
&lt;p>在图形表示中，我呈现了节点的概念性可视化以及键为0、4和255的示例。 以下是每种节点类型的描述：&lt;/p>
&lt;p>Node-4：最多可以容纳4个不同的键。键存储在一个1-字节数组中，每个键对应一个指针。
其总大小为36字节（4个键 * 1字节 + 4个指针 * 8字节） 。 指针数组与键数组对齐。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/ZgMd9VEj67zynPD.png" alt="art-4.png">&lt;/p>
&lt;p>Node-16：最多可容纳16个不同的键。与Node-4类似，每个键存储在一个1-字节数组中，每个键对应一个指针。
其总大小为144字节（16个键 * 1字节 + 16个指针 * 8字节）。与Node-4一样，指针数组与键数组对齐。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/hGKOPUJgHxjDEvW.png" alt="art-16.png">&lt;/p>
&lt;p>Node-48：最多可以容纳48个不同的键。
当一个键存在于这个节点中时，表示该键的1-字节数组位置将保存一个指向该键子节点的指针数组中的索引。
其总大小为640字节（256个键 * 1字节 + 48个指针 * 8字节）。
请注意，指针数组和键数组不再对齐。键数组存储指针数组的索引。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/hPknsotyM8FLEQR.png" alt="art-48.png">&lt;/p>
&lt;p>Node-256：最多可以容纳256个不同的键。
它只有一个指针数组，如果指针被设置，则表示该键存在，并且它指向其子节点。
其总大小为2048字节（256个指针 * 8字节）。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/vcCMHXy8zVYQ7GU.png" alt="art-256.png">&lt;/p>
&lt;p>对于上一节中的示例，我们可以使用Node-4而不是Node-256来存储键，因为我们只有3个键。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/cmPVCo4JthKTqGj.png" alt="art-index-example.png">&lt;/p>
&lt;h2 id="duckdb中的art">DuckDB中的ART&lt;/h2>
&lt;p>在考虑在DuckDB中实现哪种索引结构时，我们希望找到一种既可以用于&lt;strong>保持PK/FK/唯一约束&lt;/strong>，
又可以&lt;strong>加速范围查询和连接&lt;/strong>的结构。DBMS通常实现&lt;strong>哈希表&lt;/strong>用于约束检查，以及&lt;strong>B+树&lt;/strong>用于范围查询。
然而，在ART索引中，我们看到了一种机会，可以通过使用一种数据结构来减少代码复杂性，同时满足两种用例的需求。
ART索引提供的主要特性，我们正在利用的包括：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>紧凑的结构&lt;/strong>：由于ART的内部节点相对较小，它们可以放入CPU缓存，因此比B+树更注重缓存。&lt;/li>
&lt;li>&lt;strong>快速的点查询&lt;/strong>：ART点查询的最坏情况时间复杂度是O(k)，对于约束检查来说足够快。&lt;/li>
&lt;li>&lt;strong>插入不会引起显著的性能降低&lt;/strong>：许多哈希表变种在达到一定大小时必须重建。
在实际情况下，一个插入操作可能导致性能显著下降，查询突然花费更多的时间来完成，对于用户来说看不出明显的原因。
在ART中，插入操作可能会导致节点的增长（例如，Node-4可能会增长到Node-16），但这些操作是廉价的。&lt;/li>
&lt;li>&lt;strong>能够处理范围查询&lt;/strong>：虽然ART不像B+树那样快速执行范围查询，因为它必须执行树遍历，而B+树可以顺序扫描叶节点，
但它仍然比哈希表具有优势，因为这些类型的查询可以执行（有人可能会争辩说可以使用哈希表进行范围查询，但不如ART高效）。
这使我们可以高效地使用ART进行高选择性的范围查询和索引连接。&lt;/li>
&lt;li>&lt;strong>可维护性&lt;/strong>：使用一种结构同时进行约束检查和范围查询，而不是两种结构，更具代码效率和可维护性。&lt;/li>
&lt;/ol>
&lt;h3 id="用来干什么">用来干什么&lt;/h3>
&lt;p>如前所述，ART索引在DuckDB中主要用于三个方面。&lt;/p>
&lt;p>&lt;strong>数据约束&lt;/strong>。主键、外键和唯一约束都由ART索引维护。
当在带有约束的元组中插入数据时，将有效地尝试在ART索引中执行插入，如果元组已经存在则会失败。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Insert unique values into ART
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Insert conflicting value in ART will fail
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fk_integers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FOREIGN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REFERENCES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- This insert works normally
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fk_integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- This fails after checking the ART in integers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fk_integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>范围查询&lt;/strong>。对索引列的&lt;strong>高选择性&lt;/strong>（应该是指范围较小）范围查询也将使用ART索引。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Insert unique values into ART
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Range queries (if highly selective) will also use the ART index
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>连接&lt;/strong>。具有&lt;strong>少量匹配项的Join&lt;/strong>也将利用现有的ART索引。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Optionally you can always force index joins with the following pragma
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">PRAGMA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">force_index_join&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Insert unique values into ART
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Joins will also use the ART index
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>表达式索引&lt;/strong>。ART索引也可用于快速查找表达式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Creates index over i+j expression
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INDEX&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i_index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">USING&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ART&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Uses ART index point query
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="art存储">ART存储&lt;/h2>
&lt;p>存储ART索引时存在两个主要约束：&lt;/p>
&lt;p>1）必须以允许懒加载的方式存储索引。否则，我们将不得不完全加载索引，
包括可能对在该会话中执行的查询不必要的节点； 2）不能增加节点大小。否则，我们将减少ART索引的缓存感知效率。&lt;/p>
&lt;h3 id="后序遍历">后序遍历&lt;/h3>
&lt;p>为了允许懒加载，我们必须存储节点的所有子节点，收集每个子节点的存储位置信息，
然后，在存储实际节点时，我们存储每个子节点的磁盘信息。要执行这种类型的操作，需要进行后序遍历。&lt;/p>
&lt;p>后序遍历如下图所示。红色的圆圈表示存储节点的数字顺序。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/p8via2eTkAxFWJ1.png" alt="serialization-order.png">&lt;/p>
&lt;p>下图显示了DuckDB块格式下的实际表示。在DuckDB中，数据存储在256KB的连续块中。每个块由一个id表示。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/8eifxaCWVJkZ3EG.png" alt="block-storage.png">&lt;/p>
&lt;p>在本例中，Block0 存储了一些元数据。在偏移量100,000和100,200之间，存储了ART索引的元数据(例如，名称，约束，表达式)及其根节点的&amp;lt;Block,Offset&amp;gt;。&lt;/p>
&lt;p>例如，假设我们正在查找在存储序号为1的Leaf[1]中的键。我们将首先在&amp;lt;Block:2, Offset:220&amp;gt;加载ART根节点，
通过检查存储在该节点中的键，我们将看到我们必须在&amp;lt;Block:2, Offset:140&amp;gt;加载Node-16，
然后最后在&amp;lt;Block:2, Offset:0&amp;gt;加载Leaf[1]。这意味着对于这个查找，只有这3个节点被加载到内存中。
后续对这些节点的访问只需要内存访问，而对其他节点的访问(例如，Leaf[2])仍需磁盘访问。&lt;/p>
&lt;p>实现这个(反)序列化过程的一个主要问题是，现在我们不仅需要保存指针的内存地址信息，
还需要知道它们是否已经在内存中，以及如果没有的话，它们存储在哪个&amp;lt;Block,Offset&amp;gt;。&lt;/p>
&lt;p>如果我们将Block Id和Offset存储在新的变量中，
将会大幅增加ART节点的大小，降低其作为缓存感知数据结构的有效性。&lt;/p>
&lt;p>以Node-256为例。保存256个指针的成本为2048字节（256个指针 * 8字节）。
假设我们决定将块信息存储在一个新数组中，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">BlockPointer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">block_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Node256&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Pointers to the child nodes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BlockPointer&lt;/span> &lt;span class="n">block_info&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Node-256将增加2048字节(256 * (4+4))，使其当前大小增加一倍，达到4096字节。&lt;/p>
&lt;h3 id="pointer-swizzling">Pointer Swizzling&lt;/h3>
&lt;p>为了避免增加ART节点的大小，我们决定实现&lt;a href="https://en.wikipedia.org/wiki/Pointer_swizzling">Swizzlable Pointers&lt;/a>并使用它们来替代常规指针。&lt;/p>
&lt;p>这个想法是，我们不需要全部64位的指针来指向一个内存地址。（48位可以提供256TB的地址空间，支持任何当前的架构，更多信息请参见&lt;a href="https://stackoverflow.com/questions/6716946/why-do-x86-64-systems-have-only-a-48-bit-virtual-address-space">这里&lt;/a>
和&lt;a href="https://en.wikipedia.org/wiki/64-bit_computing">这里&lt;/a>）
因此，我们可以使用最高有效位作为标志（即Swizzle标志）。
如果Swizzle标志被设置，那么Swizzlable Pointer中的值是节点的内存地址。
否则，该变量存储了节点存储位置的块信息。我们使用接下来的31位来存储Block ID，剩下的32位来存储Offset。&lt;/p>
&lt;p>在下图中，您可以看到DuckDB的Swizzlable Pointer的可视化表示。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/04/jt5k8xrV3BTYpK2.png" alt="pointer-swizzling.png">&lt;/p>
&lt;h2 id="基准测试">基准测试&lt;/h2>
&lt;p>为了评估当前存储实现的优点和缺点，我们运行了一个基准测试(可在此&lt;a href="https://colab.research.google.com/drive/1lidiFNswQfxdmYlsufXUT80IFpyluEF3?usp=sharing">Colab&lt;/a>获得)，
其中我们创建了一个包含50,000,000个整型元素的表，这些元素之上有一个主键约束。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">duckdb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;vault.db&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;CREATE TABLE integers (x integer primary key)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;INSERT INTO integers SELECT * FROM range(50000000);&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们在两个不同版本的DuckDB上运行这个基准测试，其中一个版本不存储索引(v0.4.0)，即索引始终在内存中，
并在数据库重新启动时重新构建；另一个版本存储索引，使用前面描述的懒加载技术。&lt;/p>
&lt;h3 id="存储时间">存储时间&lt;/h3>
&lt;p>首先测量序列化索引的额外成本。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Time(s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>重建&lt;/td>
&lt;td>8.99&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>存索引&lt;/td>
&lt;td>18.97&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>我们可以看到，存储索引的成本是不存储索引的2倍。原因是我们的表只有一列包含50,000,000个&lt;code>int32_t&lt;/code>值。
但是，在存储ART时，我们还为叶子中各自的&lt;code>row_id&lt;/code>存储了50,000,000个&lt;code>int64_t&lt;/code>值。这是额外存储成本的主要原因。&lt;/p>
&lt;h3 id="加载时间">加载时间&lt;/h3>
&lt;p>然后测量重新启动数据库所需的加载时间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Time(s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>重建&lt;/td>
&lt;td>7.75&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>存索引&lt;/td>
&lt;td>0.06&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在这里，我们可以看到加载数据库的时间有两个数量级的差异。这种差异基本上是由于加载过程中ART索引的完全重建。
相反，在存索引版本中，此时只加载有关ART索引的元数据信息。&lt;/p>
&lt;h3 id="查询时间冷">查询时间（冷）&lt;/h3>
&lt;p>我们现在测量在索引上运行点查询的冷查询时间(即，数据库刚刚重新启动，这意味着在存储版本中，索引还不存在于内存中)。
在均匀分布的10000个元素上，我们运行5000次点查询。我们使用这个值总是强制点查询加载大量未使用的节点。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/07/IeL8Wx5MQ3EcATo.png" alt="cold-run.png">&lt;/p>
&lt;p>一般来说，在持久化存储版本中，每个查询的开销要高出3倍。这主要有两个原因:&lt;/p>
&lt;ol>
&lt;li>创建节点。在存储版本中，我们确实懒创建节点，这意味着必须为每个节点分配所有参数，并加载键和前缀等值。&lt;/li>
&lt;li>Block Pinning。对每个节点，我们必须pin/unpin存储它们的块。&lt;/li>
&lt;/ol>
&lt;h3 id="查询时间热">查询时间（热）&lt;/h3>
&lt;p>&lt;img src="https://s2.loli.net/2023/10/07/q2HCjSewxXBlyMb.png" alt="hot-run.png">&lt;/p>
&lt;p>两个版本中的时间是可比较的，因为存储版本中的所有节点都已经在内存中。
总之，当存储索引处于活跃使用状态时，它们的性能与完全在内存中的索引相似。&lt;/p>
&lt;h2 id="后续工作">后续工作&lt;/h2>
&lt;p>ART索引存储是DuckDB中一个长期存在的问题，许多用户声称这是一个缺失的功能，这对他们使用DuckDB造成了障碍。
虽然现在实现了存储和懒加载ART索引，但是仍然有许多改进方案来提高ART索引的性能。&lt;/p>
&lt;ol>
&lt;li>缓存Pinned Blocks。在我们当前的实现中，尽管块可以存储多个节点，并且很可能通过查找连续重用，但块会不断地pin/unpin。巧妙地缓存它们将大大节省触发节点加载的查询的时间。&lt;/li>
&lt;li>批量加载。我们的ART索引目前不支持批量加载。这意味着当在列上创建索引时，节点将不断调整大小，因为元素将一个接一个地插入。如果我们批量加载数据，我们可以确切地知道我们必须为该数据集创建哪些节点，从而避免频繁地调整大小。&lt;/li>
&lt;li>批量插入。在执行批量插入时，会发生与批量加载类似的问题。一个可能的解决方案是创建一个带有批量加载的新ART索引，然后将其与现有的ART索引合并。&lt;/li>
&lt;li>Vectorized查找/插入。DuckDB使用了一个vectorized的执行引擎。然而，我们的ART查找和插入仍然遵循tuple-at-a-time模型。&lt;/li>
&lt;li>可更新的索引存储。在我们当前的实现中，ART索引正磁盘中完全失效后重新存储。这将导致在后续存储中不必要地增加存储时间。直接将节点更新到磁盘而不是完全重写索引可以大大降低未来的存储成本。换句话说，索引始终在每个checkpoint完全存储。&lt;/li>
&lt;/ol></description><category domain="https://berylyvos.icu/categories/db/">db</category><category domain="https://berylyvos.icu/tags/art/">ART</category><category domain="https://berylyvos.icu/tags/%E7%B4%A2%E5%BC%95/">索引</category><category domain="https://berylyvos.icu/tags/duckdb/">DuckDB</category><category domain="https://berylyvos.icu/tags/%E5%AD%98%E5%82%A8/">存储</category></item><item><title>CMU15-445(Fall 2022) 笔记：Hash Tables</title><link>https://berylyvos.icu/posts/15-445-note-hashtables/</link><guid isPermaLink="true">https://berylyvos.icu/posts/15-445-note-hashtables/</guid><pubDate>Mon, 20 Mar 2023 23:07:58 +0800</pubDate><author>berylyvos@gmail.com (Shingo)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="哈希表">哈希表&lt;/h1>
&lt;p>哈希表实现了一个关联数组抽象数据类型，将键映射到值。它提供平均 O(1)，最坏 O(n) 的操作复杂度，以及 O(n) 的空间复杂度。即便平均操作复杂度为O(1)，实际中常需考虑&lt;strong>常数优化&lt;/strong>。&lt;/p>
&lt;p>哈希表主要有两部分：哈希函数、哈希方案。&lt;/p>
&lt;h2 id="哈希函数">哈希函数&lt;/h2>
&lt;p>哈希函数将一个大的键空间映射到较小的域中。它用于计算数组中的索引。我们需要考虑&lt;strong>执行效率和冲突率&lt;/strong>之间的权衡。在极端情况下，我们有一个哈希函数总是返回常量（非常快，但一切皆冲突）。在另一个极端，我们有一个“完美”的哈希函数，没有冲突，但计算时间会非常长。理想设计位于两者之间。&lt;/p>
&lt;p>哈希函数接受任何键作为其输入。然后返回该键的整数表示（即“哈希”）。函数的输出是确定性的（相同的键应始终生成相同的哈希输出）。&lt;/p>
&lt;p>DBMS不需要使用加密安全哈希函数（例如SHA-256），因为我们不需要担心保护密钥内容。这些哈希函数主要由DBMS在内部使用，因此信息不会泄漏到系统外部。&lt;/p>
&lt;p>当前的SOTA哈希函数是&lt;a href="https://cyan4973.github.io/xxHash/">Facebook XXHash3&lt;/a>。&lt;/p>
&lt;h2 id="哈希方案">哈希方案&lt;/h2>
&lt;p>如何在哈希后处理冲突就是哈希方案要做的。此时，我们需要考虑分配一个大的哈希表以减少冲突和在发生冲突时执行额外操作之间的权衡。&lt;/p>
&lt;h2 id="静态哈希方案">静态哈希方案&lt;/h2>
&lt;p>静态哈希方案是指哈希表的大小是固定的。这意味着如果DBMS用完了哈希表中的存储空间，那么它必须从头开始重新构建一个更大的哈希表，这是非常昂贵的。通常新哈希表的大小是原来哈希表的两倍。&lt;/p>
&lt;h3 id="linear-probe">Linear Probe&lt;/h3>
&lt;p>开放寻址法，最基本的哈希方案。它通常也是最快的。它使用一个循环缓冲区来存储数组槽位。当发生冲突时，搜索下一个槽位，直到找到空位为止。删除操作可能会导致之后的查询出错。解决此问题最常见的方法是使用标记删除，标记告诉未来查询继续扫描下一个位置。&lt;/p>
&lt;h3 id="robin-hood">Robin Hood&lt;/h3>
&lt;p>Linear Probe 的扩展，其思想是尽量减少每个键与它们在哈希表中的最佳位置(即它们被哈希到的原始槽)的最大距离。该策略窃取“富键”（距离较小）的槽，将它们提供给“穷键”，故称为“罗宾汉哈希”。&lt;/p>
&lt;h3 id="cuckoo">Cuckoo&lt;/h3>
&lt;p>“布谷鸟哈希”，使用具有不同哈希函数种子的多个哈希表。在插入时，检查每个表并选择任意一个有空闲槽的表。如果没有表有空闲槽，则从其中一个表中驱逐元素，然后重新哈希它，找到一个新位置。极少数情况可能会死循环。我们可以使用新的哈希函数种子重新构建所有哈希表(不太常见)，或者使用更大的表重新构建哈希表(更常见)。&lt;/p>
&lt;p>由于每个哈希表只检查一个位置，Cuckoo 哈希方案保证了删除和查询的时间复杂度总是O(1)。&lt;/p>
&lt;h2 id="动态哈希方案">动态哈希方案&lt;/h2>
&lt;p>静态哈希方案要求DBMS提前知道它想要存储的元素的数量。否则，如果需要扩容/收缩，则必须重建整个哈希表。动态的哈希方案能够按需调整哈希表的大小，而无需重建整个表。&lt;/p>
&lt;h3 id="chained">Chained&lt;/h3>
&lt;p>链式哈希，最常见的动态哈希方案。常用的拉链法就是桶大小为1的链式哈希。&lt;/p>
&lt;h3 id="extendible">EXTENDIBLE&lt;/h3>
&lt;p>改进的链式哈希，它会分裂桶而不是让链条无限增长。&lt;/p>
&lt;ul>
&lt;li>通过倍增目录，实现桶数量的倍增。&lt;/li>
&lt;li>只分裂发生溢出的桶。&lt;/li>
&lt;li>全局深度：目录倍增的次数。用于判断&lt;code>key&lt;/code>属于哪个桶，&lt;code>hash(key)&lt;/code>需要的最低有效位数。&lt;/li>
&lt;li>局部深度：桶分裂的次数。用来判断分裂桶是否会导致目录倍增。&lt;/li>
&lt;li>插入时桶满了：
&lt;ul>
&lt;li>若桶局部深度等于全局深度，目录倍增，全局深度加一；同时分裂桶，桶局部深度加一。&lt;/li>
&lt;li>若桶局部深度小于全局深度，只分裂桶，增加局部深度。&lt;/li>
&lt;li>维护目录指针指向新桶。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="linear">Linear&lt;/h3>
&lt;p>Extendible的改进版。主要思想是渐进式倍增目录，减少单点延时。这种方案不是在桶溢出时立即分裂该桶，而是维护一个分裂指针来跟踪下一个要分裂的槽。无论该槽的指针是否指向了溢出桶，都会进行拆分。&lt;/p>
&lt;ul>
&lt;li>当任何一个桶满时，该桶指向存放新元素的溢出桶；后将分裂指针指向的槽进行分裂，新槽被添加至目录的末尾，并创建一个新的哈希函数。&lt;/li>
&lt;li>当分裂指针到达最后一个未分裂槽时，将原始哈希函数替换为新哈希函数。&lt;/li>
&lt;/ul></description><category domain="https://berylyvos.icu/categories/cmu15-445/">CMU15-445</category><category domain="https://berylyvos.icu/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category><category domain="https://berylyvos.icu/tags/%E7%AC%94%E8%AE%B0/">笔记</category><category domain="https://berylyvos.icu/tags/hashing-scheme/">Hashing Scheme</category></item><item><title>CMU15-445(Fall 2022) 笔记：Pilot</title><link>https://berylyvos.icu/posts/15-445-note-1/</link><guid isPermaLink="true">https://berylyvos.icu/posts/15-445-note-1/</guid><pubDate>Sun, 05 Mar 2023 22:53:43 +0800</pubDate><author>berylyvos@gmail.com (Shingo)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="pilot">Pilot&lt;/h1>
&lt;h2 id="dbms">DBMS&lt;/h2>
&lt;blockquote>
&lt;p>A &lt;strong>database&lt;/strong> is an organized collection of inter-related &lt;strong>data&lt;/strong> that models some aspect of the real-world.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>A &lt;strong>DBMS&lt;/strong> is a &lt;strong>software&lt;/strong> that allows applications to store and analyze information in a database.&lt;/p>
&lt;/blockquote>
&lt;p>不要混淆“数据库(database)”和“数据库管理系统(database management system, DBMS)”。PostgreSQL, Oracle, SQLite, Snowflake这些都是DBMS。&lt;/p>
&lt;h2 id="关系模型与关系代数">关系模型与关系代数&lt;/h2>
&lt;p>&lt;strong>关系模型&lt;/strong>基于关系定义数据库抽象，解耦合逻辑层与物理层。&lt;/p>
&lt;ul>
&lt;li>将数据库存储在简单的数据结构(关系)中。&lt;/li>
&lt;li>通过高级语言访问数据，DBMS找出最佳执行策略。&lt;/li>
&lt;li>物理存储留给DBMS实现。&lt;/li>
&lt;/ul>
&lt;p>从数据库中存储和检索信息通常有两种语言：&lt;/p>
&lt;ul>
&lt;li>Procedural：查询命令需要指定 DBMS 执行时的具体查询策略（关系代数）&lt;/li>
&lt;li>Non-Procedural（Declarative）：只需要指定想要查询哪些数据，无需关心具体查询实现（关系演算）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>关系代数&lt;/strong>是一种Procedural语言，因为它定义了如何计算查询的high-level步骤（比如先做join还是projection，这对于查询优化很重要）&lt;/p>
&lt;h2 id="现代sql">现代SQL&lt;/h2>
&lt;p>SQL是关系数据库的Declarative的查询语言。当前SQL的标准是SQL-2016，目前大部分DBMS至少支持SQL-92标准。&lt;/p>
&lt;h3 id="窗口函数">窗口函数&lt;/h3>
&lt;p>窗口函数在一组相关的元组之间执行“滑动”计算。类似于聚合，但元组不是分组合并到单个输出元组，而是每个元组新增了一列窗口函数的计算结果。
除了普通聚合函数外，还有些特殊的窗口函数，如&lt;code>ROW_NUMBER()&lt;/code>和&lt;code>RANK()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Find the student with the second highest grade for each course.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">RANK&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">OVER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cid&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">grade&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ASC&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rank_&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enrolled&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranking&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranking&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rank_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cte">CTE&lt;/h3>
&lt;p>CTE可用作复杂查询时的临时中间表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cteName&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cteName&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Recursive CTE可以在SQL查询中实现递归。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Print the sequence of numbers from 1 to 10.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">RECURSIVE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cteSource&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ALL&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cteSource&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cteSource&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="存储">存储&lt;/h2>
&lt;p>主要讨论“面向磁盘”的DBMS体系结构，该体系结构假设数据库的主要存储位置在non-volatile磁盘(SSD, HDD)上。&lt;/p>
&lt;h3 id="面向磁盘的dbms">面向磁盘的DBMS&lt;/h3>
&lt;p>&lt;img src="https://s2.loli.net/2023/03/17/7DgvBXJ4C5T1QsV.png" alt="disk-oriented-dbms">&lt;/p>
&lt;p>数据库全部在磁盘上，数据库文件中的数据被组织成页，第一页是目录页。
为了对数据进行操作，DBMS需要将数据放入内存中。它通过缓冲池（Buffer Pool）来管理数据在磁盘和内存之间的来回移动。
执行引擎将向缓冲池请求特定的页面，缓冲池将负责将该页放入内存，并向执行引擎提供内存中该页的指针。&lt;/p>
&lt;h4 id="为什么不用mmap">为什么不用mmap&lt;/h4>
&lt;p>简单来说，不用 mmap 是为了&lt;strong>更好的控制和性能&lt;/strong>。
如果 mmap 遇到 page fault，进程将会被阻塞。mmap 不好做异常处理，也存在事务安全问题。
DBMS 比 OS 拥有更多、更充分的知识来决定数据移动的时机和数量，具体包括：&lt;/p>
&lt;ul>
&lt;li>将 dirty pages 按正确地顺序写到磁盘&lt;/li>
&lt;li>根据具体情况预获取数据&lt;/li>
&lt;li>定制化缓存置换策略&lt;/li>
&lt;li>线程/进程调度&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>更详细的讨论可以看这篇论文 &lt;a href="https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf">Are You Sure You Want to Use MMAP in Your Database Management System?&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="文件存储">文件存储&lt;/h3>
&lt;p>DBMS的存储管理器负责管理数据库的文件。它将文件表示为page的集合。它还跟踪哪些数据被读和写到了page上，以及这些page有多少可用空间。&lt;/p>
&lt;h4 id="database-pages">Database Pages&lt;/h4>
&lt;p>OS 的文件系统通常将文件切分成 pages 进行管理，DBMS 也不例外。通常 page 是固定大小的一块数据，每个 page 内部可能存储着 &lt;strong>tuples、meta-data、indexes&lt;/strong> 以及 &lt;strong>logs&lt;/strong> 等。
大多数DBMS使用固定大小的page(1-16KB)，以避免支持可变大小page所需的工程开销。&lt;/p>
&lt;p>不同 DBMS 管理 pages 的方式不同，主要分为以下几种：&lt;/p>
&lt;ul>
&lt;li>Heap File Organization&lt;/li>
&lt;li>Tree File Organization&lt;/li>
&lt;li>Sequential/Sorted File Organization (ISAM)&lt;/li>
&lt;li>Hashing File Organization&lt;/li>
&lt;/ul>
&lt;h4 id="heap-file-organization">Heap File Organization&lt;/h4>
&lt;p>Heap file 是一个无序的 pages 集合，pages 管理模块需要记录哪些 pages 已经被使用，哪些尚未被使用。主要有以下两种方法：&lt;/p>
&lt;ul>
&lt;li>Linked List: Header page 持有指向&lt;code>free pages list&lt;/code>和&lt;code>data pages list&lt;/code>的指针。它必须在数据页列表上进行顺序扫描。&lt;/li>
&lt;li>Page Directory: pages 管理模块维护着一些特殊的 pages（directory pages），它们负责记录 data pages 的位置和空闲空间大小。&lt;/li>
&lt;/ul>
&lt;h4 id="page-layout">Page Layout&lt;/h4>
&lt;p>每个 page 被分为两个部分：header 和 data，header通常包含：page大小, checksum, DBMS版本, 事务可见性, 压缩信息。
data 中记录着真正存储的数据，数据记录的形式主要有:&lt;/p>
&lt;ul>
&lt;li>Tuple-oriented（slotted-pages）：记录数据本身&lt;/li>
&lt;li>Log-structured：记录数据的操作日志&lt;/li>
&lt;/ul>
&lt;h5 id="slotted-pages">Slotted Pages&lt;/h5>
&lt;p>Tuple-oriented中，最常用的Layout方案是 &lt;strong>slotted pages&lt;/strong>。header 中的 slot array 记录每个 slot 的信息，如大小、位移等
。
&lt;img src="https://s2.loli.net/2023/03/17/8OELXjg5KDbVShA.png" alt="slotted_page">&lt;/p>
&lt;ul>
&lt;li>新增记录时：在 slot array 中新增一条记录，存放该记录的入口地址。slot array 与 data 从 page 的两端向中间生长，二者相遇时，就认为这个 page 已经满了。&lt;/li>
&lt;li>删除记录时：假设删除 tuple #3，可以将 slot array 中的第三条记录删除，并将 tuple #4 及其以后的数据都都向后移动，填补 tuple #3 的空位。&lt;/li>
&lt;/ul>
&lt;h5 id="log-structured">Log-Structured&lt;/h5>
&lt;p>Slotted-Page Design 带来的问题：&lt;/p>
&lt;ul>
&lt;li>Fragmentation：删除tuple会在page中留下碎片。&lt;/li>
&lt;li>Useless Disk I/O：由于非易失性存储的block-oriented的性质，需要读取整个块来获取tuple。&lt;/li>
&lt;li>Random Disk I/O：磁盘阅读器可能不得不跳到20个不同的地方来更新20个tuples，这可能会非常慢。&lt;/li>
&lt;/ul>
&lt;p>log-structured page 只存储更改（PUT, DELETE）的日志记录。因此，增删改的效率很高。
为了读取一条记录，DBMS从最新到最旧扫描page并重新创建tuple。为了加快查询效率，通常会对操作日志在记录 id 上建立索引。
还需要定期做日志压缩。&lt;/p>
&lt;h4 id="tuple-layout">Tuple Layout&lt;/h4>
&lt;p>每个 tuple 被分配一个唯一的记录标识符。最常用的方式：&lt;code>page_id + offset/slot&lt;/code>。例如，PostgreSQL使用 CTID (6-bytes)，SQLite使用 ROWID (8-bytes)。
tuple 的元数据包含：&lt;/p>
&lt;ul>
&lt;li>Visibility Info (concurrency control)&lt;/li>
&lt;li>Bit Map for NULL values&lt;/li>
&lt;/ul>
&lt;h3 id="oltp--olap">OLTP &amp;amp; OLAP&lt;/h3>
&lt;ul>
&lt;li>OLTP(Online Transaction Processing): 主要处理简单的读写语句，且每个语句都只操作数据库中的一小部分数据&lt;/li>
&lt;li>OLAP(Online Analytical Processing): 主要处理复杂的，需要检索大量数据并聚合的操作&lt;/li>
&lt;li>HTAP(Hybrid Transaction + Analytical Processing)&lt;/li>
&lt;/ul>
&lt;h3 id="storage-models">Storage Models&lt;/h3>
&lt;ul>
&lt;li>行存储：NSM (N-ary Storage Model)：将一个 tuple 的所有 attributes 在 page 中连续存储，适合 OLTP 场景。
&lt;ul>
&lt;li>优点：增删改、查询整条记录较快&lt;/li>
&lt;li>缺点：不适合对大块的tuples、部分attributes的操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列存储：DSM (Decomposition Storage Model)：将所有 tuples 的单个 attribute 连续存储，适用于 OLAP 场景。
&lt;ul>
&lt;li>优点：按需查询，减少I/O、有利于数据压缩&lt;/li>
&lt;li>缺点：点查询、增删改较慢&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在列存储的情形下，有两种方法标识tuple：定长offset（每个attribute大小一样）、embedded_tuple_id。&lt;/p></description><category domain="https://berylyvos.icu/categories/cmu15-445/">CMU15-445</category><category domain="https://berylyvos.icu/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category><category domain="https://berylyvos.icu/tags/%E7%AC%94%E8%AE%B0/">笔记</category></item><item><title>简单做个BitTorrent客户端</title><link>https://berylyvos.icu/posts/gorrent/</link><guid isPermaLink="true">https://berylyvos.icu/posts/gorrent/</guid><pubDate>Thu, 17 Nov 2022 11:15:54 +0800</pubDate><author>berylyvos@gmail.com (Shingo)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="功能">功能&lt;/h1>
&lt;ul>
&lt;li>多文件torrent下载&lt;/li>
&lt;li>支持UDP/HTTP Tracker&lt;/li>
&lt;li>&lt;del>支持DHT，PeX，磁力链接&lt;/del>&lt;/li>
&lt;/ul>
&lt;h1 id="golang实现">Golang实现&lt;/h1>
&lt;h2 id="找peers">找peers&lt;/h2>
&lt;h3 id="torrent文件结构与bencode编码">Torrent文件结构与Bencode编码&lt;/h3>
&lt;p>一个torrent文件包含一个&lt;strong>文件列表&lt;/strong>和关于所有片段的&lt;strong>完整性元数据&lt;/strong>(integrity metadata)，并可选地包含一个很长的&lt;strong>tracker&lt;/strong>列表，并由&lt;strong>Bencode&lt;/strong>编码。&lt;/p>
&lt;p>Bencode编码支持4种数据类型：byte string，integer，list和dictionary。&lt;/p>
&lt;p>以电影&lt;a href="https://www.imdb.com/title/tt0088847/">《早餐俱乐部》&lt;/a>为例，其torrent文件结构如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">announce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">43&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">udp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//tracker.coppersurfer.tk:6969/announce
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">announce&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l43&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">udp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//tracker.coppersurfer.tk:6969/announcee
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">l49&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">udp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//tracker.leechers-paradise.org:6969/announcee
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">l38&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">udp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//tracker.cyberia.is:6969/announcee
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">comment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">80&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">The&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Breakfast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Club&lt;/span>&lt;span class="mf">.1985&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">REMASTERED&lt;/span>&lt;span class="mf">.720&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BluRay&lt;/span>&lt;span class="mf">.999&lt;/span>&lt;span class="nx">MB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HQ&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x265&lt;/span>&lt;span class="mf">.10&lt;/span>&lt;span class="nx">bit&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">GalaxyRG&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">TGx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">creation&lt;/span> &lt;span class="nx">date&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i1600189812e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">info&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i1035352868e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l79&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">The&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Breakfast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Club&lt;/span>&lt;span class="mf">.1985&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">REMASTERED&lt;/span>&lt;span class="mf">.720&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BluRay&lt;/span>&lt;span class="mf">.999&lt;/span>&lt;span class="nx">MB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HQ&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x265&lt;/span>&lt;span class="mf">.10&lt;/span>&lt;span class="nx">bit&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">GalaxyRG&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mkve&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i678e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l42&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nx">TGx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Downloaded&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">torrentgalaxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">txte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">80&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">The&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Breakfast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Club&lt;/span>&lt;span class="mf">.1985&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">REMASTERED&lt;/span>&lt;span class="mf">.720&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BluRay&lt;/span>&lt;span class="mf">.999&lt;/span>&lt;span class="nx">MB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HQ&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x265&lt;/span>&lt;span class="mf">.10&lt;/span>&lt;span class="nx">bit&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">GalaxyRG&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">TGx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">piece&lt;/span> &lt;span class="nx">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i524288e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">pieces&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">39500&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="err">���&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nx">ģ&lt;/span>&lt;span class="err">�&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="err">�&lt;/span>&lt;span class="nx">Ɇp&lt;/span>&lt;span class="err">�&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="err">��&lt;/span>&lt;span class="nx">HH&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="err">�`&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">���&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个字典中，所有键和字符串类型值的结构都是&lt;code>length:xxx&lt;/code>，整型表示为&lt;code>ixxxe&lt;/code>，列表为&lt;code>l[]...[]e&lt;/code>，字典为&lt;code>d(key:[])...(key:[])e&lt;/code>，其中，&lt;code>[]&lt;/code>可以为四种类型的任意一种。&lt;/p>
&lt;ul>
&lt;li>&lt;code>announce&lt;/code>：tracker的URL&lt;/li>
&lt;li>&lt;code>announce-list&lt;/code>：tracker的URL列表（可选）&lt;/li>
&lt;li>&lt;code>info&lt;/code>：包含文件共享信息的字典
&lt;ul>
&lt;li>&lt;code>files&lt;/code>：文件字典列表（仅当共享多个文件时）
&lt;ul>
&lt;li>&lt;code>length&lt;/code>：文件的大小，以字节为单位&lt;/li>
&lt;li>&lt;code>path&lt;/code>：与子目录名称对应的字符串列表，其中最后一个是实际的文件名&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>name&lt;/code>：建议要保存的文件名（单文件）/ 建议的目录名称（多文件）&lt;/li>
&lt;li>&lt;code>piece length&lt;/code>：文件片的大小，通常为256 KB&lt;/li>
&lt;li>&lt;code>pieces&lt;/code>：每个文件片的二进制编码的SHA-1哈希列表（如果有多文件，则按文件字典中的顺序拼接在一起）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一个torrent文件是由&lt;strong>infohash&lt;/strong>唯一标识的，其值为整个&lt;code>info&lt;/code>的SHA-1哈希。&lt;/p>
&lt;h3 id="解析torrent文件">解析torrent文件&lt;/h3>
&lt;p>解析bencode编码的torrent文件，本质是递归下降。当然，Marshal/Unmarshal的过程需要借助go的反射。最终解析得到一个扁平化的结构体&lt;code>TorrentFile&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">TorrentFile&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Announce&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">AnnounceList&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">InfoSHA&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">ShaLen&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FileList&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">File&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FileName&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FileLen&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PieceLen&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PieceSHA&lt;/span> &lt;span class="p">[][&lt;/span>&lt;span class="nx">ShaLen&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">HasMulti&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="从tracker获取peers信息">从tracker获取peers信息&lt;/h3>
&lt;p>根据&lt;code>Announce&lt;/code>中URL的协议类型，可将tracker分为UDP/HTTP tracker。&lt;/p>
&lt;h4 id="http">HTTP&lt;/h4>
&lt;p>想要得到peers信息，需要给tracker发送一个GET请求。参数列表如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>info_hash&lt;/code>：torrent文件中&lt;code>info&lt;/code>字典（bencode编码）的SHA-1哈希&lt;/li>
&lt;li>&lt;code>peer_id&lt;/code>：客户端随机生成的20字节长度字符串&lt;/li>
&lt;li>&lt;code>port&lt;/code>：客户端监听的端口&lt;/li>
&lt;li>&lt;code>uploaded&lt;/code>：当前已上传量&lt;/li>
&lt;li>&lt;code>downloaded&lt;/code>：当前已下载量&lt;/li>
&lt;li>&lt;code>left&lt;/code>：当前剩余下载量&lt;/li>
&lt;/ul>
&lt;p>tracker收到请求后返回一个bencode编码的字典。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">interval&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i900e&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">peers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">252&lt;/span>&lt;span class="p">:([&lt;/span>&lt;span class="nx">ip&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">e&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，&lt;code>interval&lt;/code>表示请求tracker的时间间隔，&lt;code>peers&lt;/code>包含了peer的IP地址和端口信息（大端表示），其值为每6字节一组的二进制数据。同样，需要解析得到peer信息切片。&lt;/p>
&lt;h4 id="udp">UDP&lt;/h4>
&lt;p>为了减少HTTP请求给tracker服务器带来的开销、提升性能，tracker也支持UDP。&lt;/p>
&lt;p>与HTTP的一次请求响应不同，由于UDP不可靠，客户端至少需要发送两个UDP数据包。为了保证安全性，tracker在收到客户端的第一个包时返回一个&lt;code>connection_id&lt;/code>，让客户端在下一个包带上该参数，收到后校验。同时，&lt;code>connection_id&lt;/code>一段时间后会失效。&lt;/p>
&lt;h5 id="connect">Connect&lt;/h5>
&lt;p>首先，客户端发送connect包，参数如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>protocol_id&lt;/code>：0x41727101980，用于标识协议&lt;/li>
&lt;li>&lt;code>action&lt;/code>：0 表示connect请求&lt;/li>
&lt;li>&lt;code>transaction_id&lt;/code>：随机值，4Bytes&lt;/li>
&lt;/ul>
&lt;p>tracker服务器返回的包：&lt;/p>
&lt;ul>
&lt;li>&lt;code>action&lt;/code>：0 表示connect请求（如果出错则为3）&lt;/li>
&lt;li>&lt;code>transaction_id&lt;/code>：与客户端请求值一致&lt;/li>
&lt;li>&lt;code>connection_id&lt;/code>：由tracker生成，用于标识客户端&lt;/li>
&lt;/ul>
&lt;h5 id="announce">Announce&lt;/h5>
&lt;p>随后，客户端发送announce包，参数如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>connection_id&lt;/code>：tracker返回的connection_id&lt;/li>
&lt;li>&lt;code>action&lt;/code>：1 表示announce请求&lt;/li>
&lt;li>&lt;code>transaction_id&lt;/code>：随机值，4Bytes&lt;/li>
&lt;li>&lt;code>event&lt;/code>：none = 0, completed = 1, started = 2, stopped = 3&lt;/li>
&lt;li>&lt;code>key&lt;/code>：随机值，4Bytes&lt;/li>
&lt;li>&lt;code>num_want&lt;/code>：想要tracker返回的最大peers数量，-1为默认值&lt;/li>
&lt;/ul>
&lt;p>剩余的&lt;code>info_hash&lt;/code>，&lt;code>peer_id&lt;/code>这些参数与HTTP请求tracker时相同。
最后，tracker服务器返回包含peers信息的包：&lt;/p>
&lt;ul>
&lt;li>&lt;code>action&lt;/code>：1 表示announce请求&lt;/li>
&lt;li>&lt;code>transaction_id&lt;/code>：与客户端请求值一致&lt;/li>
&lt;li>&lt;code>interval&lt;/code>：下一次客户端announce的时间间隔&lt;/li>
&lt;li>&lt;code>leechers&lt;/code>：未完成下载的peers数量&lt;/li>
&lt;li>&lt;code>seeders&lt;/code>：已经完成下载且愿意继续上传的peers数量&lt;/li>
&lt;/ul>
&lt;p>包的最后是6字节一组的peers信息（IP + Port）。&lt;/p>
&lt;h2 id="下载">下载&lt;/h2>
&lt;h3 id="tcp连接与bittorrent握手">TCP连接与BitTorrent握手&lt;/h3>
&lt;h3 id="与peers交换信息">与peers交换信息&lt;/h3>
&lt;h3 id="并发控制">并发控制&lt;/h3>
&lt;h1 id="参考">参考&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.bittorrent.org/beps/bep_0003.html">BEP-3: The BitTorrent Protocol Specification&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.theory.org/BitTorrentSpecification">Bittorrent Protocol Specification v1.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/archeryue/go-torrent">A toy torrent client written in golang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.jse.li/posts/torrent">Building a BitTorrent client from the ground up in Go&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://bittorrent.org/beps/bep_0015.html">BEP-15: UDP Tracker Protocol for BitTorrent&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lifehacker.com/bittorrent-s-future-dht-pex-and-magnet-links-explain-5411311">BitTorrent’s Future: DHT, PEX, and Magnet Links Explained&lt;/a>&lt;/li>
&lt;/ul></description><category domain="https://berylyvos.icu/categories/%E7%8E%A9/">玩</category><category domain="https://berylyvos.icu/tags/golang/">Golang</category><category domain="https://berylyvos.icu/tags/bittorrent/">BitTorrent</category></item><item><title>void kernel</title><link>https://berylyvos.icu/posts/hello-world/</link><guid isPermaLink="true">https://berylyvos.icu/posts/hello-world/</guid><pubDate>Fri, 11 Nov 2022 01:38:56 +0800</pubDate><author>berylyvos@gmail.com (Shingo)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="hello">Hello&lt;/h1>
&lt;hr>
&lt;p>Okay,&lt;br>
this is Crazy.&lt;/p>
&lt;h2 id="void-kernel">void kernel&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-brainfuck" data-lang="brainfuck">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">++++++++++&lt;/span>&lt;span class="k">[&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">+++++++&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">+++++++++++&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">+++&lt;/span>&lt;span class="nv">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span class="nb">-&lt;/span>&lt;span class="k">]&lt;/span>&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">++++++++&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">+&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">++&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;lt;&amp;lt;&lt;/span>&lt;span class="nb">-------&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">------&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nb">+++++&lt;/span>&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">++++&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nb">------&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;lt;&amp;lt;&lt;/span>&lt;span class="nb">-&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">+++++++++&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nb">-----------&lt;/span>&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">-------&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nb">++++++++&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;lt;&amp;lt;&lt;/span>&lt;span class="nb">+++++++&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">------&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="nv">&amp;gt;&lt;/span>&lt;span class="nb">+&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="good">Good&lt;/h2>
&lt;h3 id="-2147483648">-2147483648&lt;/h3>
&lt;h4 id="acwing-291-蒙德里安的梦想httpswwwacwingcomactivitycontentproblemcontent1010">&lt;a href="https://www.acwing.com/activity/content/problem/content/1010/">AcWing 291. 蒙德里安的梦想&lt;/a>&lt;/h4>
&lt;p>求把 $N×M$ 的棋盘分割成若干个 $1×2$ 的长方形，有多少种方案。&lt;/p>
&lt;p>例如当 $N=2，M=4$ 时，共有 $5$ 种方案。当 $N=2，M=3$ 时，共有 $3$ 种方案。&lt;/p>
&lt;p>&lt;img src="https://berylyvos.icu/img/mondriaan.jpeg" alt="mondriaan">&lt;/p>
&lt;p>数据范围： $1≤N,M≤11$&lt;/p>
&lt;p>输入样例：&lt;/p>
&lt;pre tabindex="0">&lt;code>1 2
1 3
1 4
2 2
2 3
2 4
2 11
4 11
0 0
&lt;/code>&lt;/pre>&lt;p>输出样例：&lt;/p>
&lt;pre tabindex="0">&lt;code>1
0
1
2
3
5
144
51205
&lt;/code>&lt;/pre>&lt;p>代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// f[i][j] 前i-1列都摆好，且从第i-1列伸出到第i列的状态是j的所有方案数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 每种状态是否有连续奇数个零，有则状态无效为false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// state[i][j] 状态i的前一列的合法状态j
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 预处理1：st[]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 枚举每种状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">isValid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 状态 i 的第 j+1 位为1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// cnt为奇数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">isValid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">isValid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">st&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">isValid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 预处理2：相邻两列的合法状态 state[][]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// i &amp;amp; j == 0 表示 相邻两列没有重合部分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// st[i | j] 表示 两列合并后没有连续奇数个零
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// dp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nl">k&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="bye">Bye&lt;/h2>
&lt;p>&lt;img src="https://berylyvos.icu/img/yojouhan_cover.png" alt="yojouhan">&lt;/p></description><category domain="https://berylyvos.icu/categories/void/">void</category><category domain="https://berylyvos.icu/tags/c-/">C++</category><category domain="https://berylyvos.icu/tags/brainfuck/">Brainfuck</category><category domain="https://berylyvos.icu/tags/%E7%AE%97%E6%B3%95/">算法</category><category domain="https://berylyvos.icu/tags/voidkernel/">voidkernel</category></item></channel></rss>